// Generated by CoffeeScript 1.6.3
(function() {
  var ConstructSlider;

  ConstructSlider = (function() {
    ConstructSlider.viewportW;

    function ConstructSlider() {
      this.nav = $('nav.slides-nav');
      this.container = $('#slides');
      this.inner = this.container.find('.slides-container');
      this.setInnerWidth();
      this.setupArrows();
      this.setupDrawerNav();
      this.setupImagesNav();
      this.setupKeybindings();
      this.watchViewportWidth();
    }

    ConstructSlider.prototype.setInnerWidth = function() {
      var width;
      width = null;
      $(".slides-container section").each(function() {
        return width = width + $(this).outerWidth(true) + 3;
      });
      return $(this.inner).css('width', width);
    };

    ConstructSlider.prototype.setupArrows = function() {
      var _this = this;
      $('.nav-info').addClass('slide-up');
      return $('.main-nav').on('click', '.arrow', function(event) {
        var id;
        id = $(event.target).attr('data-id');
        _this.slideNext(id);
        return _this.hideDrawer();
      });
    };

    ConstructSlider.prototype.slideNext = function(id) {
      var $current, $next, $scrollPos, $target, index, offset, pxVal, speed, timeout, width;
      $current = $(this.container).find('.active');
      index = $(this.inner).find('section').index($current);
      if (id === "next") {
        $next = $current.next();
        width = (index + 1) * 90;
        pxVal = (this.viewportW * (index + 1)) * (90 / 100);
      } else if (id = "prev") {
        $next = $current.prev();
        width = (index - 1) * 90;
        pxVal = (this.viewportW * (index - 1)) * (90 / 100);
      }
      if ($next.length) {
        $target = $current.find('div');
        timeout = 0;
        speed = 400;
        $scrollPos = $current.scrollTop();
        if ($scrollPos > 100) {
          offset = $current.scrollTop();
          $target.addClass('animate').css('transform', "translateY(" + offset + "px");
          $target.on("transitionend webkitTransitionEnd MSTransitionEnd", function() {
            return $(this).removeClass('animate');
          });
          timeout = speed + 50;
        }
        window.setTimeout((function() {
          $(this.inner).css('transform', "translateX(-" + pxVal + "px)");
          $current.removeClass('active');
          $next.addClass('active');
          return $(this.inner).on("transitionend webkitTransitionEnd MSTransitionEnd", function() {
            $target.css('transform', "translateX(0)");
            return $current.scrollTop(0);
          });
        }), timeout);
        return this.hideDrawer();
      }
    };

    ConstructSlider.prototype.setupDrawerNav = function() {
      var _this = this;
      $('.menu').click(function() {
        return _this.toggleDrawer();
      });
      return $('.drawer a').on('click', function(event) {
        var $current, $currentIndex, $target, $targetIndex, dataId, diff, pxVal;
        dataId = $(event.target).attr('href');
        dataId = dataId.replace("#", "");
        $target = $(_this.inner).find("[data-id='" + dataId + "']");
        $targetIndex = $target.index();
        $current = _this.container.find('.active');
        $currentIndex = $current.index();
        diff = Math.abs($targetIndex - $currentIndex);
        if ($targetIndex !== $currentIndex) {
          pxVal = Math.floor((_this.viewportW * $targetIndex) * (90 / 100));
          $($current).removeClass('active');
          $target.addClass('active');
          _this.inner.addClass("transition-" + diff).css('transform', "translateX(-" + pxVal + "px)");
          _this.hideDrawer();
          return $current.scrollTop(0);
        }
      });
    };

    ConstructSlider.prototype.setupImagesNav = function() {
      this.setBrowserHeight();
      return $('nav.dots').on('click', 'span', function() {
        var images, index;
        if (!$(this).hasClass('current')) {
          $(this).addClass('current').siblings().removeClass('current');
          index = $(this).index();
          images = $(this).parent().siblings('img');
          return $(images[index]).addClass('current').siblings().removeClass('current');
        }
      });
    };

    ConstructSlider.prototype.setBrowserHeight = function() {
      var images;
      images = $('.multiple-images');
      return $(images).each(function() {
        var imageHeight;
        imageHeight = $(this).find('img.current').outerHeight();
        return $(this).height(imageHeight);
      });
    };

    ConstructSlider.prototype.toggleDrawer = function(val) {
      if (val === "close" || this.container.hasClass('show-nav')) {
        return $(this.container).removeClass('show-nav').addClass('hide-nav');
      } else if (val = 'open' || this.container.hasClass('show-nav')) {
        return $(this.container).removeClass('hide-nav').addClass('show-nav');
      }
    };

    ConstructSlider.prototype.hideDrawer = function() {
      var _this = this;
      if ($(this.container).hasClass('show-nav')) {
        return this.inner.on("transitionend webkitTransitionEnd MSTransitionEnd", function() {
          _this.inner.alterClass('transition-*', '');
          return _this.toggleDrawer("close");
        });
      }
    };

    ConstructSlider.prototype.setupKeybindings = function() {
      var _this = this;
      $(window).focus(function() {
        var window_focus;
        return window_focus = true;
      });
      return $(window).keydown(function(event) {
        var arrow, keyCode;
        keyCode = event.keyCode || event.which;
        arrow = {
          left: 37,
          up: 38,
          right: 39,
          down: 40
        };
        switch (keyCode) {
          case arrow.left:
            return _this.slideNext("prev");
          case arrow.right:
            return _this.slideNext("next");
          case arrow.down:
            return _this.toggleDrawer();
          case arrow.up:
            return _this.toggleDrawer();
        }
      });
    };

    ConstructSlider.prototype.watchViewportWidth = function() {
      var onResize,
        _this = this;
      this.viewportW = this.getViewportW();
      onResize = function() {
        _this.viewportW = _this.getViewportW();
        _this.setInnerWidth();
        _this.recalculatePos();
        return _this.setBrowserHeight();
      };
      return $(window).bind("resize", function() {
        var timer;
        timer && clearTimeout(timer);
        return timer = setTimeout(onResize, 500);
      });
    };

    ConstructSlider.prototype.getViewportW = function() {
      return document.documentElement.clientWidth;
    };

    ConstructSlider.prototype.recalculatePos = function() {
      var $current, index, pxVal;
      $current = $(this.container).find('.active');
      index = $(this.inner).find('section').index($current);
      pxVal = Math.floor((this.viewportW * index) * (90 / 100));
      return $(this.inner).css('transform', "translateX(-" + pxVal + "px)");
    };

    return ConstructSlider;

  })();

  $(function() {
    return new ConstructSlider();
  });

}).call(this);
